userItem {
    userID: string,
    username: string,
    hashedpassword: string,
    email: string,
    sk: string,
    teams: {
        teamID: string {
            teamRole: string
        },
        teamID2: string {
            teamRole: string
        }
    },
    chats: {
        chatID1: string {
            chatTitle: string
        },
        chatID2: string {
            chatTitle: string,
            chatGroup?: string,
            chatGroupID?: string

        }
    },
    brains: {
        brainID1: string {
            brainName: string
        }
    }
}

team{
    teamID: string,
    teamTitle: string,
    members: {
        memberuserID: {
            role: string
        },
        memberuserID2: {
            role: string
        }
    },
    sharedChats: {
        chatID1: string {
            chatTitle: string
        },
        chatID2: string {
            chatTitle: string,
            chatGroup?: string,
            chatGroupID?: string
        },
        chatID3: string {
            chatTitle: string,
            permittedUsers: string,
            hiddenUsers: string,
        }
    },
}



user {
    userID: string,
    username: string,
    hashedPassword: string,
    email: string,
    sk: string,
    teams: string[],
}

chat {
    chatTitle: string,
    chatID: string, // primary index, also the S3 key for the chat object
    userID: string, // global secondary index, equals the teamID if team, otherwise is a user's ID
    editors: string[], // if team and empty, whole team can access, if not empty, only editors and admins can edit
    viewers: string[], // same principle as above
    timestamp: string,
    chatGroup?: string,
    chatGroupID?: string,
}

team {
    teamID: string, // hash key
    teamName: string,
    admins: string[],
    members: string[], //excludes admins
}

interface Chat {
    chatID: string,
    chatTitle: string,
    access: boolean, // true if user has edit access. user automatically has edit access for any chat objects where userID is the user's ID, for team chats (chats where userID is the teamID) only if the editors is blank or the user is in editors can this boolean be true
    groupID?: string,
    groupTitle?: string,
    teamID?: string
    teamTitle?: string
}

// retrieving chats for a user: 
get user teams, 
initialize array of Chat objects
get chats using teams as userID index (to get team chats), 
for chats where user is not in editors if editors is not blank, access = false
get chats using user's ID as userID index
access = true for all of these
remove chats where user is not in viewers if viewers is not empty
return Chat[] array to frontend


